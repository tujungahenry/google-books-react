{"ast":null,"code":"import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport logger from \"./logService\"; // Whenever we have an response with an error, this function will be called first and then the controller will pass to a catch block\n\naxios.interceptors.response.use(null, function (error) {\n  var expectedError = error.response && error.response.status >= 400 && error.response.status < 500;\n\n  if (!expectedError) {\n    // Unexpected (network down, server down, database down, bug)\n    // - Log them\n    // - Display a generic and friendly error message\n    logger.log(error);\n    toast.error(\"An unexpected error occured.\");\n  }\n\n  return Promise.reject(error);\n});\nexport default {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete\n};","map":{"version":3,"sources":["C:\\Users\\tujun\\Desktop\\google-books-react\\client\\src\\services\\httpService.js"],"names":["axios","toast","logger","interceptors","response","use","error","expectedError","status","log","Promise","reject","get","post","put","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,MAAP,MAAmB,cAAnB,C,CAEA;;AACAF,KAAK,CAACG,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CAAgC,IAAhC,EAAsC,UAAAC,KAAK,EAAI;AAC7C,MAAMC,aAAa,GACjBD,KAAK,CAACF,QAAN,IACAE,KAAK,CAACF,QAAN,CAAeI,MAAf,IAAyB,GADzB,IAEAF,KAAK,CAACF,QAAN,CAAeI,MAAf,GAAwB,GAH1B;;AAKA,MAAI,CAACD,aAAL,EAAoB;AAClB;AACA;AACA;AACAL,IAAAA,MAAM,CAACO,GAAP,CAAWH,KAAX;AACAL,IAAAA,KAAK,CAACK,KAAN,CAAY,8BAAZ;AACD;;AAED,SAAOI,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACD,CAfD;AAiBA,eAAe;AACbM,EAAAA,GAAG,EAAEZ,KAAK,CAACY,GADE;AAEbC,EAAAA,IAAI,EAAEb,KAAK,CAACa,IAFC;AAGbC,EAAAA,GAAG,EAAEd,KAAK,CAACc,GAHE;AAIbC,EAAAA,MAAM,EAAEf,KAAK,CAACe;AAJD,CAAf","sourcesContent":["import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport logger from \"./logService\";\n\n// Whenever we have an response with an error, this function will be called first and then the controller will pass to a catch block\naxios.interceptors.response.use(null, error => {\n  const expectedError =\n    error.response &&\n    error.response.status >= 400 &&\n    error.response.status < 500;\n\n  if (!expectedError) {\n    // Unexpected (network down, server down, database down, bug)\n    // - Log them\n    // - Display a generic and friendly error message\n    logger.log(error);\n    toast.error(\"An unexpected error occured.\");\n  }\n\n  return Promise.reject(error);\n});\n\nexport default {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete\n};\n"]},"metadata":{},"sourceType":"module"}