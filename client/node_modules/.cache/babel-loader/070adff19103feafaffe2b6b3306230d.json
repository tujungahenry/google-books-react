{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\"); // tslint:disable:no-unsafe-any\n\n/**\n * Memo class used for decycle json objects. Uses WeakSet if available otherwise array.\n */\n\n\nvar Memo =\n/** @class */\nfunction () {\n  function Memo() {\n    // tslint:disable-next-line\n    this.hasWeakSet = typeof WeakSet === 'function';\n    this.inner = this.hasWeakSet ? new WeakSet() : [];\n  }\n  /**\n   * Sets obj to remember.\n   * @param obj Object to remember\n   */\n\n\n  Memo.prototype.memoize = function (obj) {\n    var e_1, _a;\n\n    if (this.hasWeakSet) {\n      if (this.inner.has(obj)) {\n        return true;\n      }\n\n      this.inner.add(obj);\n      return false;\n    } else {\n      try {\n        for (var _b = tslib_1.__values(this.inner), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var value = _c.value;\n\n          if (value === obj) {\n            return true;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      this.inner.push(obj);\n      return false;\n    }\n  };\n  /**\n   * Removes object from internal storage.\n   * @param obj Object to forget\n   */\n\n\n  Memo.prototype.unmemoize = function (obj) {\n    if (this.hasWeakSet) {\n      this.inner.delete(obj);\n    } else {\n      for (var i = 0; i < this.inner.length; i++) {\n        if (this.inner[i] === obj) {\n          this.inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  };\n\n  return Memo;\n}();\n\nexports.Memo = Memo;","map":null,"metadata":{},"sourceType":"script"}